Zuul是Netflix开源的微服务网关，可以和Eureka、Ribbon、Hystrix等组件配合使用，
Spring Cloud对Zuul进行了整合与增强，Zuul的主要功能是路由转发和过滤器。
Zuul基于JVM的路由器和服务器端负载均衡器。
同时，Zuul的规则引擎允许规则和过滤器基本上用任何JVM语言编写，内置支持Java和Groovy。这个功能，就可以实现动态路由的功能了。
当需要添加某个新的对外服务时，一般上不停机更新是通过数据缓存配置或者使用Groovy进行动态路由的添加的。

Zuul的核心一系列的过滤器：
•身份认证与安全：识别每个资源的验证要求，并拒绝那些与要求不符的请求。
•审查与监控：在边缘位置追踪有意义的数据和统计结果，从而带来精确的生产视图。
•动态路由：动态地将请求路由到不同的后端集群。
•压力测试：逐渐增加指向集群的流量，以了解性能。
•负载分配：为每一种负载类型分配对应容量，并启用超出限定值的请求。
•静态响应处理：在边缘位置直接建立部分相应，从而避免其转发到内部集群。

URL访问：
    http://localhost:8077/userZuul/user/getUser?email=517491659@qq.com&pwd=123456&token=ab

Zuul包含了对请求的路由和过滤两个最主要的功能：
    其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤功能，则负责对请求的处理过程进行干预，
    是实现请求校验，服务聚合等功能的基础。
    Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。
提供=代理+路由+过滤