Hystrix [hɪst'rɪks]，中文含义是豪猪，因其背上长满棘刺，从而拥有了自我保护的能力。
本文所说的Hystrix是Netflix开源的一款容错框架，同样具有自我保护能力。为了实现容错和自我保护，
下面我们看看Hystrix如何设计和实现的。

Hystrix设计目标：
•对来自依赖的延迟和故障进行防护和控制——这些依赖通常都是通过网络访问的
•阻止故障的连锁反应
•快速失败并迅速恢复
•回退并优雅降级
•提供近实时的监控与告警

Hystrix遵循的设计原则：
•防止任何单独的依赖耗尽资源（线程）
•过载立即切断并快速失败，防止排队
•尽可能提供回退以保护用户免受故障
•使用隔离技术（例如隔板，泳道和断路器模式）来限制任何一个依赖的影响
•通过近实时的指标，监控和告警，确保故障被及时发现
•通过动态修改配置属性，确保故障及时恢复
•防止整个依赖客户端执行失败，而不仅仅是网络通信

Hystrix如何实现这些设计目标？
•使用命令模式将所有对外部服务（或依赖关系）的调用包装在HystrixCommand或HystrixObservableCommand对象中，并将该对象放在单独的线程中执行；
•每个依赖都维护着一个线程池（或信号量），线程池被耗尽则拒绝请求（而不是让请求排队）。
•记录请求成功，失败，超时和线程拒绝。
•服务错误百分比超过了阈值，熔断器开关自动打开，一段时间内停止对该服务的所有请求。
•请求失败，被拒绝，超时或熔断时执行降级逻辑。
•近实时地监控指标和配置的修改。

Hystrix整个工作流如下：
1.构造一个 HystrixCommand或HystrixObservableCommand对象，用于封装请求，并在构造方法配置请求被执行需要的参数；
2.执行命令，Hystrix提供了4种执行命令的方法，后面详述；
3.判断是否使用缓存响应请求，若启用了缓存，且缓存可用，直接使用缓存响应请求。Hystrix支持请求缓存，但需要用户自定义启动；
4.判断熔断器是否打开，如果打开，跳到第8步；
5.判断线程池/队列/信号量是否已满，已满则跳到第8步；
6.执行HystrixObservableCommand.construct()或HystrixCommand.run()，如果执行失败或者超时，跳到第8步；否则，跳到第9步；
7.统计熔断器监控指标；
8.走Fallback备用逻辑
9.返回请求响应

Hystrix的容错主要是通过添加容许延迟和容错方法，帮助控制这些分布式服务之间的交互。
还通过隔离服务之间的访问点，阻止它们之间的级联故障以及提供回退选项来实现这一点，从而提高系统的整体弹性。
Hystrix主要提供了以下几种容错方法：
•资源隔离
    资源隔离主要指对线程的隔离。Hystrix提供了两种线程隔离方式：线程池和信号量。
    线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。
    但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，
    但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。
    线程池模式下，当超过指定时间未响应的服务，Hystrix会通过响应中断的方式通知线程立即结束并返回。
•熔断
现实生活中，可能大家都有注意到家庭电路中通常会安装一个保险盒，当负载过载时，保险盒中的保险丝会自动熔断，以保护电路及家里的各种电器，这就是熔断器的一个常见例子。
Hystrix中的熔断器(Circuit Breaker)也是起类似作用，
Hystrix在运行过程中会向每个commandKey对应的熔断器报告成功、失败、超时和拒绝的状态，熔断器维护并统计这些数据，并根据这些统计信息来决策熔断开关是否打开。
如果打开，熔断后续请求，快速返回。隔一段时间（默认是5s）之后熔断器尝试半开，放入一部分流量请求进来，相当于对依赖服务进行一次健康检查，如果请求成功，熔断器关闭。
•降级
降级，通常指务高峰期，为了保证核心服务正常运行，需要停掉一些不太重要的业务，或者某些服务不可用时，
执行备用逻辑从故障服务中快速失败或快速返回，以保障主体业务不受影响。
Hystrix提供的降级主要是为了容错，保证当前服务不受依赖服务故障的影响，从而提高服务的健壮性。
要支持回退或降级处理，可以重写HystrixCommand的getFallBack方法或HystrixObservableCommand的resumeWithFallback方法。